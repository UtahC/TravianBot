//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace TravianBot.Core.Models
{
    using Common;
    using GalaSoft.MvvmLight;
    using LinqToDB;
    using LinqToDB.Mapping;
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Collections.Specialized;
    using System.ComponentModel;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Text;
    using System.Threading.Tasks;
    using TravianBot.Core;

    public class Village : DB_Village
    {
        private int villageId;
        private string villageName;
        private int x;
        private int y;
        private bool isActive;
        private bool isCapital;
        private ObservableCollection<Building> buildings = new ObservableCollection<Building>();

        public override int DB_Id { get; set; }
        public override int VillageId
		{
            get
            {
                return villageId;
            }
            set
            {
                Set(() => VillageId, ref villageId, value);
            }
		}
		public override string VillageName
		{
            get
            {
                return villageName;
            }
            set
            {
                Set(() => VillageName, ref villageName, value);
            }
        }
		public override int X
		{
            get
            {
                return x;
            }
            set
            {
                Set(() => X, ref x, value);
            }
        }
		public override int Y
		{
            get
            {
                return y;
            }
            set
            {
                Set(() => Y, ref y, value);
            }
        }
		public bool IsActive
		{
            get
            {
                return isActive;
            }
            set
            {
                Set(() => IsActive, ref isActive, value);
            }
        }
		public override bool IsCapital
		{
            get
            {
                return isCapital;
            }
            set
            {
                Set(() => IsCapital, ref isCapital, value);
            }
        }
        public ObservableCollection<Building> Buildings { get { return buildings; } }

  //      public ObservableCollection<Building> Buildings
		//{
  //          get
  //          {
  //              return buildings;
  //          }
  //          set
  //          {
  //              Set(() => Buildings, ref buildings, value);
  //          }
  //      }

        public Village(int villageId, string villageName, int x, int y, bool isActive = false, bool isCapital = false)
        {
            this.villageId = villageId;
            this.villageName = villageName;
            this.x = x;
            this.y = y;
            this.isActive = isActive;
            this.isCapital = isCapital;

            PropertyChanged += (s, e) =>
            {
                Task.Run(() => 
                {
                    using (var db = new TravianBotDB())
                    {
                        db.DB_Villages.Where(dV => dV.VillageId == VillageId)
                        .Set(dV => dV.VillageName, VillageName)
                        .Set(dV => dV.IsCapital, IsCapital).Update();
                    }
                });
            };
        }

        public override bool Equals(object otherObject)
        {
            var other = otherObject as Village;
            if (other == null)
                return false;

            bool result = true;
            result = result && VillageId == other.VillageId;
            result = result && VillageName == other.VillageName;
            result = result && X == other.X;
            result = result && Y == other.Y;
            result = result && IsCapital == IsCapital;

            return result;
        }

        public override int GetHashCode()
        {
            throw new NotImplementedException();
        }

        public bool UpdatePropertyIfNotEquals<TProperty>(
            Expression<Func<Village, TProperty>> PropertyExpression, TProperty newValue)
        {
            var info = Util.GetPropertyInfo(this, PropertyExpression);

            if (!info.CanRead)
                throw new Exception("Property can not be read.");
            if (!info.CanWrite)
                throw new Exception("Property can not be write.");
            if (info.GetValue(this) != null && !(info.GetValue(this) is TProperty))
                throw new Exception("Type of property and newValuew are different.");

            var oldValue = (TProperty)info.GetValue(this);
            if (oldValue != null && oldValue.Equals(newValue))
                return false;

            info.SetValue(this, newValue);
            return true;
        }

    }

    [Table("DB_Villages")]
    public partial class DB_Village : ObservableObject
    {
        [PrimaryKey, Identity]
        public virtual int DB_Id { get; set; } // Long
        [Column, PrimaryKey]
        public virtual int VillageId { get; set; } // Long
        [Column, Nullable]
        public virtual string VillageName { get; set; } // text(255)
        [Column]
        public virtual int X { get; set; } // Long
        [Column]
        public virtual int Y { get; set; } // Long
        [Column]
        public virtual bool IsCapital { get; set; } // Bit

        
    }
}

