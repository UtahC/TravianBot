//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace TravianBot.Core
{
    using Extensions;
    using HtmlAgilityPack;
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Reflection;
    using System.Text;
    using System.Threading;
    using System.Threading.Tasks;
    using TravianBot.Core.Log;
    using TravianBot.Core.Models;
    using TravianBot.Core.State;

    public class Client : GalaSoft.MvvmLight.ObservableObject
    {
        private StateMachine stateMachine;
        private static Client client;
        private string url , html, javascript;
        private bool isBotWorking = false;
        private DateTime BotAvailableTime = new DateTime(1970, 1, 1);
        private ObservableCollection<Village> villages = new ObservableCollection<Village>();

        public ManualResetEvent WorkAvailableSignal = new ManualResetEvent(true);

        public static Client Default
        {
            get
            {
                if (client == null)
                    client = new Client();
                return client;
            }
        }
        public string Html
        {
            get
            {
                return html;
            }
            set
            {
                html = value;
            }
        }
        public HtmlDocument Document
        {
            get
            {
                var doc = new HtmlDocument();
                doc.LoadHtml(Html);
                return doc;
            }
        }
        public bool IsBotWorking
        {
            get { return isBotWorking; }
            private set
            {
                if (value)
                    WorkAvailableSignal.WaitOne();
                Set(() => IsBotWorking, ref isBotWorking, value);
            }
        }
        public ISetting Setting { get { return Core.Setting.Default; } }
        public string Url
        {
            get { return url; }
            set
            {
                if (value != url)
                    Set(() => Url, ref url, value);
            }
        }
        public string BotMessage { get; private set; }
        public string Javascript { get { return javascript; } private set { javascript = value; } }
        public IEventLogger EventLogger { get; set; }
        public ILogger Logger { get; set; }
        public StateMachine StateMachine { get; }
        public ObservableCollection<Village> Villages { get { return villages; } }
        public string BasePath { get; private set; }

        private Client()
        {
            //Get the main exe folder
            string exePath = Assembly.GetExecutingAssembly().GetName().CodeBase;
            exePath = new Uri(exePath).LocalPath;
            BasePath = Path.GetDirectoryName(exePath);

            url = Setting.Server;
            stateMachine = new StateMachine();
        }

        public void SetBotWorking(bool isBotWorking, string message = "")
        {
            IsBotWorking = isBotWorking;
            BotMessage = message;
        }

        public void ExecuteJavascript(string script)
        {
            Set(() => Javascript, ref javascript, script);
        }

        public void SetBotUnavailableSpan(int milliseconds)
        {
            SetBotUnavailableTimeUtil(DateTime.Now.AddMilliseconds(milliseconds));
        }

        //public bool IsExistsVillageId(int villageId)
        //{
        //    return Villages.Where(v => v.VillageId == villageId).Count() > 0;
        //}

        //public bool IsExactlyExistsVillage(Village village)
        //{
        //    var mappedVillage = Villages.Where(v => v.VillageId == village.VillageId).FirstOrDefault();
        //    if (mappedVillage != null && mappedVillage.Equals(village))
        //        return true;

        //    return false;
        //}

        public void SetBotUnavailableTimeUtil(DateTime dateTime)
        {
            if (dateTime > BotAvailableTime)
                BotAvailableTime = dateTime;
            WorkAvailableSignal.Reset();
            Task.Run(async () =>
            {
                while (BotAvailableTime > DateTime.Now)
                    await Task.Delay(1000);
                WorkAvailableSignal.Set();
            });
        }

        public void Login()
        {
            BotAvailableTime = new DateTime(1970, 1, 1);
            stateMachine.State = new LoginState() { IsLoginOnly = true };
            stateMachine.Start(new CancellationToken());
        }

        public void StartBot()
        {
            BotAvailableTime = new DateTime(1970, 1, 1);
            stateMachine.State = new LoginState();
            stateMachine.Start(new CancellationToken());
        }
    }

    public class BotWorkingEventArgs : EventArgs
    {
        public string Message { get; private set; }

        public BotWorkingEventArgs()
        {

        }

        public BotWorkingEventArgs(string message)
        {
            Message = message;
        }
    }
}

